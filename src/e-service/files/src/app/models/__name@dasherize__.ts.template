import {CaseModel} from "@app/models/case-model";
import {<%= classify(name) %>Service} from "@services/<%= dasherize(name)%>.service";
import {InterceptModel} from "@decorators/intercept-model";
import {FactoryService} from "@services/factory.service";
import {<%= classify(name) %>Interceptor} from "@model-interceptors/<%= dasherize(name)%>-interceptor";
import {CaseTypes} from "@app/enums/case-types.enum";
import {HasLicenseApprovalMonthly} from "@contracts/has-license-approval-monthly";
import {mixinApprovalLicenseWithMonthly} from "@app/mixins/mixin-approval-license-with-monthly";
import {mixinRequestType} from "@app/mixins/mixin-request-type";
import {HasRequestType} from "@app/interfaces/has-request-type";

const _Approval = mixinApprovalLicenseWithMonthly(mixinRequestType(CaseModel))
const {send, receive} = new <%= classify(name) %>Interceptor()

@InterceptModel({send, receive})
export class <%= classify(name) %> extends _Approval<<%= classify(name) %>Service, <%= classify(name) %>> implements HasLicenseApprovalMonthly , HasRequestType {
  service: <%= classify(name) %>Service;
  caseType = CaseTypes.<%= enumName %>
  constructor() {
    super();
    this.service = FactoryService.getService('<%= classify(name) %>Service')
  }
}
